<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" 
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-3.1.xsd
						http://www.springframework.org/schema/security/oauth2 
						http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">
	
	<sec:global-method-security pre-post-annotations="enabled">
		<!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>
	
	<!-- Service requests for access tokens, Spring Security endpoint -->
	<sec:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
		<sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>
	 	
 	<!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error handling 
		separately. This isn't mandatory, but it makes it easier to control the behavior. -->
	<sec:http pattern="/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" 
			access-decision-manager-ref="accessDecisionManager">
		<sec:anonymous enabled="false" />
		<sec:intercept-url pattern="/v1/**" access="ROLE_USER"/>
		<sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<sec:password-encoder hash="sha-256"/>
			<sec:user-service id="userDetailsService">
				<sec:user name="usuario" password="b7e94be513e96e8c45cd23d162275e5a12ebde9100a425c4ebcdd7fa4dcd897c" 
					authorities="ROLE_USER" />
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>
 
 	<!-- ClientsDetailsService: Entry Point to clients database (given is in memory implementation) -->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="da39a3ee5e6b4b0d3255bfef95601890afd80709" authorized-grant-types="password,refresh_token"
				authorities="ROLE_USER" />
	</oauth:client-details-service>
	
	<!-- Used to create token and and everything about them except for their persistence that is responsibility of TokenStore (Given here is a default implementation) -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<!-- Used for the persistence of tokens (currently an in memory implementation) -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

 	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="rest" />
	</bean>

	<bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="rest/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<sec:authentication-manager id="clientAuthenticationManager">
		<sec:authentication-provider user-service-ref="clientDetailsUserService" />
	</sec:authentication-manager>

	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>
	
	<bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="tokenStore" ref="tokenStore" />
		<property name="clientDetailsService" ref="clientDetails"/>
		<property name="requestFactory" ref="requestFactory"/>
	</bean>
	
	<bean id="requestFactory" class="org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory">
		<constructor-arg name="clientDetailsService" ref="clientDetails" />
	</bean>
	
	<!-- authorization-server aka AuthorizationServerTokenServices is an interface that defines everything necessary for token management -->
	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices" 
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code disabled="true" />
		<oauth:implicit disabled="true"/>
		<oauth:refresh-token />
		<oauth:client-credentials disabled="true"/>
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="test" token-services-ref="tokenServices" />

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
	
</beans>